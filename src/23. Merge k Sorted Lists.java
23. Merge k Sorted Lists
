/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 
    1. divide and conquer
    2. priority queue
 */


class Solution {
//     // divide and conquer
//     public ListNode mergeKLists(ListNode[] lists) {
//         // corner case
//         if (lists == null || lists.length == 0) return null;
//         return sortLists(lists, 0, lists.length - 1); 
//     }
    
//     public ListNode sortLists(ListNode[] lists, int lo, int hi) {
//         if (lo >= hi) return lists[lo];
//         int mid = lo + (hi - lo) / 2;
//         ListNode l1 = sortLists(lists, lo, mid);
//         ListNode l2 = sortLists(lists, mid + 1, hi);
//         return merge(l1, l2);
//     }
    
//     public ListNode merge(ListNode l1, ListNode l2) {
//         if (l1 == null) return l2;
//         if (l2 == null) return l1;
//         if (l1.val < l2.val) {
//             l1.next = merge(l1.next, l2);
//             return l1;
//         } else {
//             l2.next = merge(l1, l2.next);
//             return l2;
//         }
//     }
    
    // priority queue
    // using prority queue to compare
    public ListNode mergeKLists(ListNode[] lists) {
        if (lists == null || lists.length == 0) return null;
        PriorityQueue<ListNode> queue = new PriorityQueue<>(lists.length, (a, b) -> a.val - b.val);
        
        for (ListNode node : lists) {
            if (node != null) {
                queue.add(node);
            }
        }
        
        ListNode dummy = new ListNode(0);
        ListNode cur = dummy;
        // always select current smallest one
        while(!queue.isEmpty()) {
            cur.next = queue.poll();
            cur = cur.next;
            if (cur.next != null) {
                queue.add(cur.next);
            }
        }
        return dummy.next;
    }
}